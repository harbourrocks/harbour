package github

import (
	"context"
	"github.com/dgrijalva/jwt-go"
	"github.com/harbourrocks/harbour/pkg/apiclient"
	"github.com/harbourrocks/harbour/pkg/harbourscm/models"
	"github.com/harbourrocks/harbour/pkg/logconfig"
	"time"
)

// GenerateGithubToken generates a new github access token.
// The token is generated by signing a self created jwt with the private key
// shared with github once the app was created.
// The private key was initially generated by github.
func GenerateGithubAppToken(ctx context.Context, appId int, privateKeyPEM string, validity time.Duration) (appTokenString string, err error) {
	log := logconfig.GetLogCtx(ctx)

	// keyBytes is in PEM format, convert to raw key bytes
	pKey, err := jwt.ParseRSAPrivateKeyFromPEM([]byte(privateKeyPEM))
	if err != nil {
		log.WithField("AppId", appId).WithError(err).Error("Failed to convert private key")
		return
	}

	// build the jwt
	// required claims https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#accessing-api-endpoints-as-a-github-app
	claims := jwt.MapClaims{
		"iat": time.Now().Unix(),
		"exp": time.Now().Add(validity).Unix(),
		"iss": appId,
	}

	// github requires RS256 https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#accessing-api-endpoints-as-a-github-app
	appToken := jwt.NewWithClaims(jwt.SigningMethodRS256, claims)

	// sign the jwt
	appTokenString, err = appToken.SignedString(pKey)
	if err != nil {
		log.WithField("AppId", appId).WithError(err).Error("Failed to sign jwt token")
		return
	}

	log.WithField("token", appTokenString).Trace("Got app token")

	return
}

// GenerateGithubInstallationTokenFromAppToken requests a github installation token from github
//  the required appToken can be generated with the GenerateGithubAppToken function
func GenerateGithubInstallationTokenFromAppToken(ctx context.Context, installationId, appToken string) (installationTokenString string, err error) {
	log := logconfig.GetLogCtx(ctx)

	var tokenModel models.GithubInstallationTokenModel
	addHeaders := make(map[string]string)
	addHeaders["Accept"] = "application/vnd.github.machine-man-preview+json"
	resp, err := apiclient.Post(ctx, GetInstallationTokenUrl(installationId), &tokenModel, nil, appToken, addHeaders)

	if err != nil {
		log.WithError(err).WithField("installationId", installationId).Error("Failed to get installation token")
		return
	} else if resp.StatusCode >= 400 {
		log.WithField("statusCode", resp.StatusCode).WithField("installationId", installationId).Warn("Failed to get installation token")
		return
	}

	installationTokenString = tokenModel.Token
	log.WithField("token", installationTokenString).Trace("Got installation token")

	return
}
